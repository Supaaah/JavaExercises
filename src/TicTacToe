import java.util.Scanner;

public class TicTacToe {

    static Scanner scan = new Scanner(System.in);
    
    public static void main(String[] args) {
        
        System.out.println("\nLet's play tic tac toe");

        char[][] board = {
            { '_', '_', '_' },
            { '_', '_', '_' },
            { '_', '_', '_' }
        };
        printBoard(board);

        // Loop through 9 turns for a 3x3 board
        for (int turn = 0; turn < 9; turn++) {
            if (turn % 2 == 0) {
                System.out.println("Turn: X");
                int[] pos = askUser(board);
                board[pos[0]][pos[1]] = 'X';
            } else {
                System.out.println("Turn: O");
                int[] pos = askUser(board);
                board[pos[0]][pos[1]] = 'O';
            }
            printBoard(board);

            int winner = checkWin(board);
            if (winner == 3) {
                System.out.println("X wins!");
                break;
            } else if (winner == -3) {
                System.out.println("O wins!");
                break;
            } else if (turn == 8) {
                System.out.println("It's a tie!");
            }
        }
        scan.close();
    }

    public static void printBoard(char[][] board) {
        System.out.println();
        for (char[] row : board) {
            System.out.print("\t");
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println("\n");
        }
    }

    public static int[] askUser(char[][] board) {
        int row, column;
        while (true) {
            System.out.print("Pick a row and column number (0, 1, or 2): ");
            row = scan.nextInt();
            column = scan.nextInt();
            
            // Check if input is valid and spot is empty
            if (row >= 0 && row <= 2 && column >= 0 && column <= 2 && board[row][column] == '_') {
                break;
            } else {
                System.out.println("Invalid input or spot taken. Try again.");
            }
        }
        return new int[] { row, column };
    }

    public static int checkWin(char[][] board) {
        int rows = checkRows(board);
        if (Math.abs(rows) == 3) return rows;

        int cols = checkColumns(board);
        if (Math.abs(cols) == 3) return cols;

        int leftDiagonal = checkLeftDiagonal(board);
        if (Math.abs(leftDiagonal) == 3) return leftDiagonal;

        int rightDiagonal = checkRightDiagonal(board);
        if (Math.abs(rightDiagonal) == 3) return rightDiagonal;

        return 0;
    }

    public static int checkRows(char[][] board) {
        for (char[] row : board) {
            int count = 0;
            for (char cell : row) {
                if (cell == 'X') count++;
                else if (cell == 'O') count--;
            }
            if (Math.abs(count) == 3) return count;
        }
        return 0;
    }

    public static int checkColumns(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            int count = 0;
            for (int j = 0; j < board[i].length; j++) {
                if (board[j][i] == 'X') count++;
                else if (board[j][i] == 'O') count--;
            }
            if (Math.abs(count) == 3) return count;
        }
        return 0;
    }

    public static int checkLeftDiagonal(char[][] board) {
        int count = 0;
        for (int i = 0; i < board.length; i++) {
            if (board[i][i] == 'X') count++;
            else if (board[i][i] == 'O') count--;
        }
        return count;
    }

    public static int checkRightDiagonal(char[][] board) {
        int count = 0;
        for (int i = 0; i < board.length; i++) {
            if (board[i][board.length - 1 - i] == 'X') count++;
            else if (board[i][board.length - 1 - i] == 'O') count--;
        }
        return count;
    }
}
