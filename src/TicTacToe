import java.util.Scanner;

public class TicTacToe {

    static Scanner scan = new Scanner(System.in);
    
    public static void main(String[] args) {
        
        System.out.println("\nLet's play tic tac toe");

        char[][] board = {
            { '_', '_', '_' },
            { '_', '_', '_' },
            { '_', '_', '_' }
        };
        printBoard(board);

        // Loop through 9 turns for a 3x3 board
        for (int turn = 0; turn < 9; turn++) {
            if (turn % 2 == 0) {
                System.out.println("Turn: X");
                int[] pos = askUser(board);
                board[pos[0]][pos[1]] = 'X';
            } else {
                System.out.println("Turn: O");
                int[] pos = askUser(board);
                board[pos[0]][pos[1]] = 'O';
            }
            printBoard(board);

            int winner = checkWin(board);
            if (winner == 1) {
                System.out.println("X wins!");
                break;
            } else if (winner == -1) {
                System.out.println("O wins!");
                break;
            } else if (turn == 8) {
                System.out.println("It's a tie!");
            }
        }
        scan.close();
    }

    public static void printBoard(char[][] board) {
        System.out.println();
        for (char[] row : board) {
            System.out.print("\t");
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println("\n");
        }
    }

    public static int[] askUser(char[][] board) {
        int row, column;
        while (true) {
            System.out.print("Pick a row and column number (0, 1, or 2): ");
            row = scan.nextInt();
            column = scan.nextInt();
            
            // Check if input is valid and spot is empty
            if (row >= 0 && row <= 2 && column >= 0 && column <= 2 && board[row][column] == '_') {
                break;
            } else {
                System.out.println("Invalid input or spot taken. Try again.");
            }
        }
        return new int[] { row, column };
    }

    public static int checkWin(char[][] board) {
        if (checkRows(board) == 1 || checkColumns(board) == 1 || checkLeftDiagonal(board) == 1 || checkRightDiagonal(board) == 1) {
            return 1; // X wins
        } else if (checkRows(board) == -1 || checkColumns(board) == -1 || checkLeftDiagonal(board) == -1 || checkRightDiagonal(board) == -1) {
            return -1; // O wins
        }
        return 0;
    }

    public static int checkRows(char[][] board) {
        for (char[] row : board) {
            if (row[0] == row[1] && row[1] == row[2]) {
                if (row[0] == 'X') return 1;
                if (row[0] == 'O') return -1;
            }
        }
        return 0;
    }

    public static int checkColumns(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                if (board[0][i] == 'X') return 1;
                if (board[0][i] == 'O') return -1;
            }
        }
        return 0;
    }

    public static int checkLeftDiagonal(char[][] board) {
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            if (board[0][0] == 'X') return 1;
            if (board[0][0] == 'O') return -1;
        }
        return 0;
    }

    public static int checkRightDiagonal(char[][] board) {
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            if (board[0][2] == 'X') return 1;
            if (board[0][2] == 'O') return -1;
        }
        return 0;
    }
}
